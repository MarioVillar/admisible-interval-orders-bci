import numpy as np

from .intvl_ensemble_block import IntvlEnsembleBlock


class IntvlSugenoEnsemble(IntvlEnsembleBlock):
    """
    Block of model ensembles for each frecuency band range, where the model ensembles
    aggregation is done by the Sugeno integral.
    -

    A IntvlModelEnsemble is used on each frecuency band range. The model types comprising each individual
    ensemble are the same. Then, the predictions of each frequency range and class are integrated in the
    following way:
    1. For each class and frequency range, obtain the interval ordering by applying a K-alpha mapping
        of the intervals obtained returned by the individual model ensembles.
    2. For each class, compute the Sugeno integral of the intervals using the ordering obtained in the
        previous step.
    3. The class with the Sugeno integral value is the winning class.
    """

    def predict_proba(self, X: np.array) -> np.array:
        """
        Predict class probabilities for X.

        Parameters
        ----------
        - X : array-like of shape (n_frec_ranges, n_samples, n_features)
            Input samples.

        Returns
        -------
        - y : array-like of shape (n_samples, n_classes)
            Class probabilities of the input samples.
        """
        y_intvl = self._predict_ensembles_proba(X=X)  # Shape returned: (n_samples, n_classes, n_frec_ranges, 2)

        y = np.zeros((y_intvl.shape[0], y_intvl.shape[1]))

        # Compute Sugeno integral for each sample and each class
        for i in range(y_intvl.shape[0]):
            for j in range(y_intvl.shape[1]):
                y[i, j] = self.sugeno_integral(y_intvl[i, j])

        return y

    def sugeno_integral(self, x: np.array) -> float:
        """
        Sugeno integral
        -
        Compute the Sugeno integral of the intervals generated by each model ensemble for a specific class.

        The procedure is as follows:
        1. Sort the array using lexicographical order (x_sorted).
        2. Obtain the minimum of the pairwise comparisons between the intervals and the fuzzy measure values,
            i.e., between x_sorted[i] and fuzzy_measure[i].
        3. Return the overall max of the pairwise comparisons.

        Parameters
        ----------
        - x : array-like of shape (n_frec_ranges, 2)
            Intervals predicted by each model ensemble (for each frequency range) for a specific class.
            Note: it does not neccesarilly have to be the intervals, it could be any other value outside this project.

        Returns
        -------
        - sugeno_integral : float
            Sugeno integral of the intervals.
        """
        # Sort the array using lexicographical order
        x_sorted = x[np.lexsort((x[:, 1], x[:, 0]))]

        # Append the fuzzy measure values to the sorted array
        # The first value is not used because it corresponds to the empty set (not used in sugeno integral
        #   but indeed used in choquet integral)
        stack_y_fm = np.column_stack((x_sorted, self.fuzzy_measure[1:]))

        # Obtain minimum of pairwise comparisons
        pairwise_min = np.min(stack_y_fm, axis=1)

        # Return overall max
        return np.max(pairwise_min)
